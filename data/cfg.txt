Start:
START

Terminals:
. , + - * / [ ] { } ( ) ' " : ; = ! > < % // >> << ~ & if elif else for in is name while continue break pass class number return def with raise import as from string and or not true false none

Variabel:
START TEXTED ITERATE_TEXTED FLOW_TEXTED 
DOT PLUS MINUS MULTIPLY DIVISION OPEN_SQUARE_BRACKET CLOSE_SQUARE_BRACKET OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET OPEN_NORMAL_BRACKET CLOSE_NORMAL_BRACKET SINGLE_QUOTE DOUBLE_QUOTE
COLON SEMICOLON COMMA NEWLINE SPACE OR_SYM REL_OP ASS_OP ART_OP LOG_OP MEM_OP IDN_OP BIT_OP
IF ELIF ELSE IF_HEADER IF_TEXTED ELIF_HEADER ELIF_TEXTED ELSE_HEADER ELSE_TEXTED
IF_TEXTED_FUNC ELIF_TEXTED_FUNC ELSE_TEXTED_FUNC 
COND_OPERATION COND_OPERATOR COND_OPERAND 
FOR FOR_HEADER FOR_TEXTED FOR_VARIABLE ITERABLE IN
FOR_TEXTED_FUNC
WHILE WHILE_HEADER WHILE_TEXTED WHILE_TEXTED_FUNC 
CONTINUE CONTINUE_TEXTED
BREAK BREAK_TEXTED 
ITERATE
CONTINUE_TEXTED_FUNC 
BREAK_TEXTED_FUNC 
ITERATE_FUNC 
PASS 
CLASS CLASS_HEADER CLASS_TEXTED CLASS_PARAM CLASS_BODY 
NAME
DEF DEF_FUNC_HEADER DEF_FUNC_TEXTED DEF_FUNC_BODY DEF_FUNC_RETURN DEF_FUNC_RETURN_VAL DEF_FUNC_PARAM 
RETURN 
TEXTED_FUNC 
WITH WITH_TEXTED WITH_HEADER WITH_ST 
WITH_TEXTED_FUNC 
NUMBER POSITIVE_NUMBER NUMBER_CTN CONSTANT CON_CTN
VARIABLE IDX VAR_CTN VAR_IDX 
STRING 
AND
OR 
NOT 
IS 
TRUE 
FALSE 
NONE 
FUNCTION FUNCTION_BASE FUNCTION_PARAM 
DICT DICT_TEXTED DICT_TYPE DICT_TYPES 
LIST LIST_TYPE LIST_TEXTED 
ASS_OPERATION ASS_OPERATOR ASS_OPERAND 
ART_OPERATION ART_OPERATOR ART_OPERAND 
RAISE RAI_OP RAI_BODY 
IMP_OPERATION AS_BLOCK IMP_TEXTED IMPT_MOD ALL AS IMPORT FROM 
METH_TEXTED METH_TEXTED_NAME METH_TEXTED_FUNC METH_INIT METH_BACK_FUNC METH_BACK_NAME 

Groups:
name = (a-z+A-Z+\_)(a-z+A-Z+\_+0-9)*
number = (0-9)(0-9)*

Rules:
// MAIN
START -> TEXTED
TEXTED -> TEXTED NEWLINE TEXTED | NEWLINE TEXTED | TEXTED NEWLINE | CLASS_TEXTED | DEF_FUNC_TEXTED | ASS_OPERATION | FLOW_TEXTED | IMP_OPERATION | RAI_OP | FUNCTION | METH_TEXTED | WITH_TEXTED | PASS | STRING | LIST | DICT | VARIABLE | CONSTANT | NONE | COND_OPERATION | IF_TEXTED | ITERATE_TEXTED 
ITERATE_TEXTED -> FOR_TEXTED | WHILE_TEXTED | LIST | DICT | VARIABLE | CONSTANT
FLOW_TEXTED -> BREAK_TEXTED | CONTINUE_TEXTED

// SYMBOLS
DOT -> .
PLUS -> +
MINUS -> -
MULTIPLY -> *
DIVISION -> /
OPEN_SQUARE_BRACKET -> [
CLOSE_SQUARE_BRACKET -> ]
OPEN_CURLY_BRACKET -> {
CLOSE_CURLY_BRACKET -> }
OPEN_NORMAL_BRACKET -> (
CLOSE_NORMAL_BRACKET -> )
SINGLE_QUOTE -> '
DOUBLE_QUOTE -> "
COLON -> :
SEMICOLON -> ;
COMMA -> ,
NEWLINE -> NEWLINE NEWLINE | __new_line__
SPACE -> SPACE SPACE | __space__
OR_SYM -> __or_sym__
REL_OP -> = = | ! = | < = | > = | < | > | IS
ASS_OP -> = | + = | - = | * = | * * = | / = | / / = | % =
ART_OP -> + | - | * | * * | / | / / | %
LOG_OP -> AND | OR
MEM_OP -> IN | NOT SPACE IN
IDN_OP -> IS | IS SPACE NOT
BIT_OP -> & | OR_SYM | ^ | > > | < < | ~


// CONDITIONAL
IF -> if
ELIF -> elif
ELSE -> else
IF_HEADER -> IF COND_OPERATION COLON NEWLINE
IF_TEXTED -> IF_TEXTED ELIF_TEXTED | IF_TEXTED ELSE_TEXTED | IF_HEADER TEXTED 
ELIF_HEADER -> ELIF COND_OPERATION COLON NEWLINE
ELIF_TEXTED -> ELIF_TEXTED ELIF_TEXTED | ELIF_TEXTED ELSE_TEXTED | ELIF_HEADER TEXTED 
ELSE_HEADER -> ELSE COLON NEWLINE
ELSE_TEXTED -> ELSE_HEADER TEXTED

// CONDITIONAL FUNCTION
IF_TEXTED_FUNC -> IF_HEADER TEXTED_FUNC | IF_TEXTED_FUNC ELIF_TEXTED_FUNC | IF_TEXTED_FUNC ELSE_TEXTED_FUNC
ELIF_TEXTED_FUNC -> ELIF_HEADER TEXTED_FUNC | ELIF_TEXTED_FUNC ELIF_TEXTED_FUNC | ELIF_TEXTED_FUNC ELSE_TEXTED_FUNC
ELSE_TEXTED_FUNC -> ELSE_HEADER TEXTED_FUNC

// CONDITIONAL OPERATION
COND_OPERATION -> OPEN_NORMAL_BRACKET COND_OPERATION CLOSE_NORMAL_BRACKET | COND_OPERAND COND_OPERATOR COND_OPERATION | COND_OPERAND
COND_OPERATOR -> REL_OP | LOG_OP | MEM_OP | IDN_OP
COND_OPERAND -> NOT COND_OPERAND | VARIABLE | CONSTANT | ART_OPERATION | METH_TEXTED | FUNCTION | LIST | STRING | NONE | OPEN_NORMAL_BRACKET COND_OPERAND CLOSE_NORMAL_BRACKET

// LOOP FOR
FOR -> for
FOR_HEADER -> FOR FOR_VARIABLE IN ITERABLE COLON NEWLINE
FOR_TEXTED -> FOR_HEADER TEXTED
FOR_VARIABLE -> VARIABLE | VARIABLE COMMA FOR_VARIABLE
ITERABLE -> VARIABLE | FUNCTION | METH_TEXTED | DICT | STRING | LIST 
IN -> in

// LOOP FOR FUNCTION
FOR_TEXTED_FUNC -> FOR_HEADER TEXTED_FUNC

// LOOP WHILE
WHILE -> while
WHILE_HEADER -> WHILE COND_OPERATION COLON NEWLINE
WHILE_TEXTED -> WHILE_HEADER TEXTED

// LOOP WHILE FUNCTION
WHILE_TEXTED_FUNC -> WHILE_HEADER TEXTED_FUNC

// OTHER LOOP
CONTINUE -> continue NEWLINE
CONTINUE_TEXTED -> ITERATE CONTINUE | ITERATE CONTINUE TEXTED
BREAK -> break NEWLINE
BREAK_TEXTED -> ITERATE BREAK | ITERATE BREAK TEXTED
ITERATE -> FOR_HEADER | FOR_TEXTED | WHILE_HEADER | WHILE_TEXTED

// OTHER LOOP FUNCTION
CONTINUE_TEXTED_FUNC -> ITERATE_FUNC CONTINUE | ITERATE CONTINUE TEXTED_FUNC
BREAK_TEXTED_FUNC -> ITERATE_FUNC BREAK | ITERATE_FUNC BREAK TEXTED_FUNC
ITERATE_FUNC -> FOR_HEADER | FOR_HEADER TEXTED_FUNC | WHILE_HEADER | WHILE_HEADER TEXTED_FUNC

// PASS
PASS -> pass

// CLASS
CLASS -> class
CLASS_HEADER -> CLASS NAME COLON NEWLINE | CLASS NAME OPEN_NORMAL_BRACKET CLASS_PARAM CLOSE_NORMAL_BRACKET COLON NEWLINE
CLASS_TEXTED -> CLASS_HEADER CLASS_BODY
CLASS_PARAM -> NAME | CLASS_PARAM COMMA CLASS_PARAM 
CLASS_BODY -> IF_TEXTED | ITERATE_TEXTED | CLASS_TEXTED | DEF_FUNC_TEXTED | ASS_OPERATION | FLOW_TEXTED | IMP_OPERATION | FUNCTION | METH_TEXTED | PASS | STRING | CLASS_BODY NEWLINE CLASS_BODY | CLASS_BODY NEWLINE

// NAME
NAME -> name

// DEF
DEF -> def
DEF_FUNC_HEADER -> DEF NAME OPEN_NORMAL_BRACKET DEF_FUNC_PARAM CLOSE_NORMAL_BRACKET COLON NEWLINE | DEF NAME OPEN_NORMAL_BRACKET CLOSE_NORMAL_BRACKET COLON NEWLINE
DEF_FUNC_TEXTED -> DEF_FUNC_HEADER DEF_FUNC_BODY
DEF_FUNC_BODY -> DEF_FUNC_BODY NEWLINE DEF_FUNC_BODY | TEXTED_FUNC
DEF_FUNC_RETURN -> RETURN ART_OPERATION | RETURN COND_OPERATION | RETURN DEF_FUNC_RETURN_VAL | RETURN
DEF_FUNC_RETURN_VAL -> METH_TEXTED | FUNCTION | VARIABLE | LIST | STRING | DICT | CONSTANT | NONE
DEF_FUNC_PARAM -> DEF_FUNC_PARAM COMMA DEF_FUNC_PARAM | NAME

// RETURN
RETURN -> return

// TEXTED
TEXTED_FUNC -> TEXTED_FUNC NEWLINE TEXTED_FUNC | TEXTED_FUNC NEWLINE | IF_TEXTED_FUNC | FOR_TEXTED_FUNC | WHILE_TEXTED_FUNC | CONTINUE_TEXTED_FUNC | BREAK_TEXTED_FUNC | CLASS_TEXTED | DEF_FUNC_TEXTED | ASS_OPERATION | IMP_OPERATION | RAI_OP | FUNCTION | METH_TEXTED | WITH_TEXTED_FUNC | PASS | STRING | DEF_FUNC_RETURN | LIST | DICT | VARIABLE | CONSTANT | NONE

// WITH
WITH -> with
WITH_TEXTED -> WITH_HEADER TEXTED
WITH_HEADER -> WITH WITH_ST AS VARIABLE COLON NEWLINE
WITH_ST -> FUNCTION | METH_TEXTED_FUNC

// WITH FUNCTION
WITH_TEXTED_FUNC -> WITH_HEADER TEXTED_FUNC

// NUMBER
NUMBER -> PLUS NUMBER | MINUS NUMBER | NUMBER_CTN
POSITIVE_NUMBER -> PLUS POSITIVE_NUMBER | NUMBER_CTN
NUMBER_CTN -> number
CONSTANT -> OPEN_NORMAL_BRACKET CONSTANT CLOSE_NORMAL_BRACKET | CON_CTN
CON_CTN -> TRUE | FALSE | NUMBER

// VARIABEL
VARIABLE -> OPEN_NORMAL_BRACKET VARIABLE CLOSE_NORMAL_BRACKET | VAR_CTN
IDX -> VARIABLE | CONSTANT | ART_OPERATION
VAR_CTN -> NAME | NAME VAR_IDX | METH_TEXTED_NAME | METH_TEXTED_NAME VAR_IDX
VAR_IDX -> VAR_IDX VAR_IDX | [ IDX ] | [ COLON ] | [ IDX COLON ] | [ COLON IDX ] | [ IDX COLON IDX ] | [ COLON COLON ] | [ COLON COLON IDX ] | [ COLON IDX COLON ] | [ COLON IDX COLON IDX ] | [ IDX COLON COLON ] | [ IDX COLON COLON IDX ] | [ IDX COLON IDX COLON ] | [ IDX COLON IDX COLON IDX ]

// STRING
STRING -> string | string VAR_IDX | STRING MULTIPLY POSITIVE_NUMBER | STRING PLUS STRING

// AND OR NOT
AND -> and
OR -> or
NOT -> not
IS -> is

// TRUE FALSE NONE
TRUE -> true
FALSE -> false
NONE -> none

// FUNCTION
FUNCTION -> FUNCTION_BASE | FUNCTION_BASE VAR_IDX
FUNCTION_BASE -> VARIABLE OPEN_NORMAL_BRACKET FUNCTION_PARAM CLOSE_NORMAL_BRACKET | VARIABLE OPEN_NORMAL_BRACKET CLOSE_NORMAL_BRACKET
FUNCTION_PARAM -> FUNCTION_PARAM COMMA FUNCTION_PARAM | VARIABLE | CONSTANT | STRING | LIST | DICT | NONE | FUNCTION | METH_TEXTED | ART_OPERATION | COND_OPERATION

// DICT
DICT -> OPEN_CURLY_BRACKET DICT_TEXTED CLOSE_CURLY_BRACKET | OPEN_CURLY_BRACKET CLOSE_CURLY_BRACKET
DICT_TEXTED -> DICT_TYPE COMMA DICT_TYPE | DICT_TYPE
DICT_TYPE -> DICT_TYPES COLON DICT_TYPES
DICT_TYPES -> VARIABLE | CONSTANT | STRING | FUNCTION | METH_TEXTED | NONE

// LIST
LIST -> OPEN_SQUARE_BRACKET LIST_TEXTED CLOSE_SQUARE_BRACKET | OPEN_SQUARE_BRACKET CLOSE_SQUARE_BRACKET
LIST_TYPE -> VARIABLE | CONSTANT | STRING | FUNCTION | METH_TEXTED | LIST | DICT | NONE
LIST_TEXTED -> LIST_TYPE | LIST_TEXTED COMMA LIST_TYPE | LIST_TYPE FOR VARIABLE IN FUNCTION

// ASSIGNMENT OPERATION
ASS_OPERATION -> VARIABLE ASS_OPERATOR ASS_OPERAND
ASS_OPERATOR -> ASS_OP
ASS_OPERAND -> OPEN_NORMAL_BRACKET ASS_OPERAND CLOSE_NORMAL_BRACKET | VARIABLE | CONSTANT | COND_OPERATION | ART_OPERATION | METH_TEXTED | FUNCTION | LIST | STRING | DICT | NONE

// ARITHMETIC OPERATION
ART_OPERATION -> OPEN_NORMAL_BRACKET ART_OPERATION CLOSE_NORMAL_BRACKET | ART_OPERATION ART_OPERATOR ART_OPERATION | ART_OPERAND
ART_OPERATOR -> ART_OP | BIT_OP
ART_OPERAND -> VARIABLE | CONSTANT | METH_TEXTED | FUNCTION

// RAISE
RAISE -> raise
RAI_OP -> RAISE RAI_BODY
RAI_BODY -> OPEN_NORMAL_BRACKET RAI_BODY CLOSE_NORMAL_BRACKET | VARIABLE | CONSTANT | COND_OPERATION | ART_OPERATION | METH_TEXTED | FUNCTION | LIST | STRING | DICT | NONE

// IMPORT
IMP_OPERATION -> FROM IMP_TEXTED IMPORT IMPT_MOD | IMPORT IMP_TEXTED | IMPORT AS_BLOCK
AS_BLOCK -> AS_BLOCK COMMA AS_BLOCK | IMP_TEXTED AS NAME
IMP_TEXTED -> IMP_TEXTED DOT IMP_TEXTED | NAME
IMPT_MOD -> NAME | ALL | AS_BLOCK | IMPT_MOD COMMA IMPT_MOD
ALL -> *
AS -> as
IMPORT -> import
FROM -> from

// METHOD
METH_TEXTED -> METH_INIT DOT METH_TEXTED | METH_BACK_FUNC | METH_BACK_NAME
METH_TEXTED_NAME -> METH_INIT DOT METH_TEXTED_NAME | METH_BACK_NAME
METH_TEXTED_FUNC -> METH_INIT DOT METH_TEXTED_FUNC | METH_BACK_FUNC
METH_INIT -> OPEN_NORMAL_BRACKET METH_INIT CLOSE_NORMAL_BRACKET | METH_BACK_FUNC | METH_BACK_NAME
METH_BACK_FUNC -> FUNCTION | FUNCTION VAR_IDX
METH_BACK_NAME -> NAME | NAME VAR_IDX
